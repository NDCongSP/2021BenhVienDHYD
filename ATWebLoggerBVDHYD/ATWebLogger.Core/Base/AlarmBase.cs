// Created using LayerGen 3.5

using System;
using System.Data.SqlTypes;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Collections.Generic;
using System.Data;
using MySql.Data.MySqlClient;
using MySql.Data.Types;

namespace CoreData
{
    [Serializable]
    public abstract partial class AlarmBase
    {
        private string _ack;
        private DateTime _dateTime;
        private double? _highLevel;
        private int _id;
        private string _locationName;
        private double? _lowLevel;
        private string _type;
        private double? _value;

        // isDirty flag determines whether data has been changed.
        private bool _layerGenIsDirty;
        protected string _connectionString;
        // _layerGenIsUpdate flag determines whether we need to do an update or an insert when saving.
        protected bool _layerGenIsUpdate;
        // isReadOnly determines if the row is in a read only state. This happens when partial
        // fields are loaded.
        private bool _isReadOnly;
        // concurrencyArray holds a serialized version of a database row to make concurrency work.
        private byte[] _concurrencyArray;
        private readonly ATWebLogger.Core.Alarm.ConcurrencyOptions _concurrency;

        private readonly bool _layerGenUseStoredProcedures;
        protected static string LayerGenTableName { get { return Universal.AlarmTableName; } }
        protected static string LayerGenTableNameDelimited { get { return $"`{Universal.AlarmTableName}`"; } }
        private const string LayerGenFieldNames = "`Ack`,`DateTime`,`HighLevel`,`LocationName`,`LowLevel`,`Type`,`Value`";
        private const string LayerGenValueNames = "@val1,@val2,@val3,@val4,@val5,@val6,@val7";
        protected const string LayerGenPrimaryKey = "Id";

        // nullDictionary is a dictionary for keeping track of which fields are null values.
        private readonly Dictionary<ATWebLogger.Core.Alarm.Fields, bool> _nullDictionary;
        // internalNameDictionary is a dictionary for holding the names of the fields, as they are in SQL Server.
        private readonly Dictionary<ATWebLogger.Core.Alarm.Fields, string> _internalNameDictionary;
        private int _oldPrimaryKeyValue;


        public virtual int Id
        {
            get { return _id; }
            protected set { _id = value; _layerGenIsDirty = true; }
        }

        public virtual string Ack
        {
            get { return _ack; }
            set { _ack = value; _layerGenIsDirty = true; if(value == null) SetNull(ATWebLogger.Core.Alarm.Fields.Ack); else UnsetNull(ATWebLogger.Core.Alarm.Fields.Ack); }
        }

        public virtual DateTime DateTime
        {
            get { return _dateTime; }
            set { _dateTime = value; _layerGenIsDirty = true; if(value == DateTime.MinValue) SetNull(ATWebLogger.Core.Alarm.Fields.DateTime); else UnsetNull(ATWebLogger.Core.Alarm.Fields.DateTime); }
        }

        public virtual double? HighLevel
        {
            get { return _highLevel; }
            set { _highLevel = value; _layerGenIsDirty = true; UnsetNull(ATWebLogger.Core.Alarm.Fields.HighLevel); }
        }

        public virtual string LocationName
        {
            get { return _locationName; }
            set { _locationName = value; _layerGenIsDirty = true; if(value == null) SetNull(ATWebLogger.Core.Alarm.Fields.LocationName); else UnsetNull(ATWebLogger.Core.Alarm.Fields.LocationName); }
        }

        public virtual double? LowLevel
        {
            get { return _lowLevel; }
            set { _lowLevel = value; _layerGenIsDirty = true; UnsetNull(ATWebLogger.Core.Alarm.Fields.LowLevel); }
        }

        public virtual string Type
        {
            get { return _type; }
            set { _type = value; _layerGenIsDirty = true; if(value == null) SetNull(ATWebLogger.Core.Alarm.Fields.Type); else UnsetNull(ATWebLogger.Core.Alarm.Fields.Type); }
        }

        public virtual double? Value
        {
            get { return _value; }
            set { _value = value; _layerGenIsDirty = true; UnsetNull(ATWebLogger.Core.Alarm.Fields.Value); }
        }

        

        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class.
        /// </summary>
        protected AlarmBase()
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since no row was loaded, this will be an insert and not an update.
            _layerGenIsUpdate = false;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            // Store the value of the primary key.
            _oldPrimaryKeyValue = _id;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since no row was loaded, this will be an insert and not an update.
            _layerGenIsUpdate = false;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            // Store the value of the primary key.
            _oldPrimaryKeyValue = _id;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, specifying
        /// if you want to use stored procedures or Sql text commands for data access.
        /// </summary>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected AlarmBase(bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since no row was loaded, this will be an insert and not an update.
            _layerGenIsUpdate = false;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            // Store the value of the primary key.
            _oldPrimaryKeyValue = _id;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, specifying
        /// if you want to use stored procedures or Sql text commands for data access.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since no row was loaded, this will be an insert and not an update.
            _layerGenIsUpdate = false;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            // Store the value of the primary key.
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        protected AlarmBase(int id)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            // Load the row matching the given primary key.
            Get(id);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, int id)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            // Load the row matching the given primary key.
            Get(id);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key. You can specify
        /// if you want to do all data access using stored procedures or Sql text.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected AlarmBase(int id, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            // Load the row matching the given primary key.
            Get(id);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key. You can specify
        /// if you want to do all data access using stored procedures or Sql text.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, int id, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            // Load the row matching the given primary key.
            Get(id);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="ATWebLogger.Core.Alarm.Fields"/> to pull from the database.</param>
        protected AlarmBase(int id, List<ATWebLogger.Core.Alarm.Fields> fields)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            // Load the row matching the given primary key.
            Get(id, fields);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="ATWebLogger.Core.Alarm.Fields"/> to pull from the database.</param>
        protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, int id, List<ATWebLogger.Core.Alarm.Fields> fields)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            // Load the row matching the given primary key.
            Get(id, fields);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="ATWebLogger.Core.Alarm.Fields"/> to pull from the database.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected AlarmBase(int id, List<ATWebLogger.Core.Alarm.Fields> fields, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            // Load the row matching the given primary key.
            Get(id, fields);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="ATWebLogger.Core.Alarm.Fields"/> to pull from the database.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, int id, List<ATWebLogger.Core.Alarm.Fields> fields, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since no data was modified yet, set the dirty flag to false.
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            // Load the row matching the given primary key.
            Get(id, fields);
            // Store the value of the primary key.
            _oldPrimaryKeyValue = _id;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the given DataRow.
        /// </summary>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        protected AlarmBase(DataRow dr)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _id;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the given DataRow.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, DataRow dr)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _id;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the given DataRow.
        /// </summary>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected AlarmBase(DataRow dr, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _id;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the given DataRow.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, DataRow dr, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            // By default, set concurrency to Ignore.
            _concurrency = ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore;
            // Since a row will be loaded, this will be an update and not an insert.
            _layerGenIsUpdate = true;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _id;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, explicitly enabling
        /// or disabling the concurrency option.
        /// </summary>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indication the level of concurrency.</param>
		protected AlarmBase(ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = false;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            _oldPrimaryKeyValue = _id;
       }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, explicitly enabling
        /// or disabling the concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indication the level of concurrency.</param>
		protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = false;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            _oldPrimaryKeyValue = _id;
       }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, explicitly enabling
        /// or disabling the concurrency option.
        /// </summary>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
		protected AlarmBase(ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = false;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            _oldPrimaryKeyValue = _id;
       }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, explicitly enabling
        /// or disabling the concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
		protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = false;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            // Set the connection string.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            _oldPrimaryKeyValue = _id;
       }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key and explicitly
        /// enabling or disabling the concurrency option.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        protected AlarmBase(int id, ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Get(id);
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key and explicitly
        /// enabling or disabling the concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, int id, ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Get(id);
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key and explicitly
        /// enabling or disabling the concurrency option.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected AlarmBase(int id, ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Get(id);
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key and explicitly
        /// enabling or disabling the concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, int id, ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since all fields were loaded, this is not read only.
            _isReadOnly = false;
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Get(id);
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="ATWebLogger.Core.Alarm.Fields"/> to pull from the database.</param>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        protected AlarmBase(int id, List<ATWebLogger.Core.Alarm.Fields> fields, ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Get(id, fields);
            _oldPrimaryKeyValue = _id;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="ATWebLogger.Core.Alarm.Fields"/> to pull from the database.</param>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, int id, List<ATWebLogger.Core.Alarm.Fields> fields, ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Get(id, fields);
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="ATWebLogger.Core.Alarm.Fields"/> to pull from the database.</param>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected AlarmBase(int id, List<ATWebLogger.Core.Alarm.Fields> fields, ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Get(id, fields);
            _oldPrimaryKeyValue = _id;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the database that matches the given primary key and loading
        /// only the fields specified and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="id">The primary key of the row that gets loaded from the database.</param>
        /// <param name="fields">The list of <see cref="ATWebLogger.Core.Alarm.Fields"/> to pull from the database.</param>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indication the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, int id, List<ATWebLogger.Core.Alarm.Fields> fields, ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _layerGenIsDirty = false;
            // Since this is a partial load, set read only to true.
            _isReadOnly = fields != null && fields.Count != 0;
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Get(id, fields);
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the given DataRow and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        protected AlarmBase(DataRow dr, ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _isReadOnly = false;
            // Since all fields were loaded, this is not read only.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the given DataRow and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, DataRow dr, ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency)
        {
            // By default, use Sql text instead of stored procedures.
            _layerGenUseStoredProcedures = false;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _isReadOnly = false;
            // Since all fields were loaded, this is not read only.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the given DataRow and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected AlarmBase(DataRow dr, ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _isReadOnly = false;
            // Since all fields were loaded, this is not read only.
            _connectionString = Universal.GetConnectionString();
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _id;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmBase"/> class, loading a
        /// row from the given DataRow and explicitly enabling or disabling the
        /// concurrency option.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database.</param>
        /// <param name="dr">The DataRow that contains the data to be loaded into the instance.</param>
        /// <param name="concurrency">A <see cref="ATWebLogger.Core.Alarm.ConcurrencyOptions"/> value indicating the level of concurrency.</param>
        /// <param name="useStoredProcedures">If true, then all data access will be done using stored procedures. Otherwise, data access will be done using Sql text</param>
        protected AlarmBase(ATWebLogger.Core.LayerGenConnectionString connectionString, DataRow dr, ATWebLogger.Core.Alarm.ConcurrencyOptions concurrency, bool useStoredProcedures)
        {
            _layerGenUseStoredProcedures = useStoredProcedures;
            _concurrency = concurrency;
            _layerGenIsUpdate = true;
            _isReadOnly = false;
            // Since all fields were loaded, this is not read only.
            _connectionString = connectionString.ConnectionString;
            _nullDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, bool>();
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, true);
            _nullDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, true);

            _internalNameDictionary = new Dictionary<ATWebLogger.Core.Alarm.Fields, string>();
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Ack, "Ack");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.DateTime, "DateTime");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.HighLevel, "HighLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Id, "Id");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LocationName, "LocationName");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.LowLevel, "LowLevel");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Type, "Type");
            _internalNameDictionary.Add(ATWebLogger.Core.Alarm.Fields.Value, "Value");

            Fill(dr);
            _layerGenIsDirty = false;
            _oldPrimaryKeyValue = _id;
        }

        /// <summary>
        /// Reads a DataRow and populates the properties from the DataRow.
        /// </summary>
        /// <param name="dr">The DataRow that contains the data to be loaded into the properties.</param>
        protected void Fill(DataRow dr)
        {
            if (HasField(_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.Ack], dr))
            {
                if (dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.Ack]] == DBNull.Value)
                {
                    SetNull(ATWebLogger.Core.Alarm.Fields.Ack);
                }
                else
                {
                    Ack = (string) dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.Ack]];
                    Ack = Ack.TrimEnd();
                    UnsetNull(ATWebLogger.Core.Alarm.Fields.Ack);
                }
            }
            else
            {
                _isReadOnly = true;
                SetNull(ATWebLogger.Core.Alarm.Fields.Ack);
            }

            if (HasField(_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.DateTime], dr))
            {
                if (dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.DateTime]] == DBNull.Value)
                {
                    SetNull(ATWebLogger.Core.Alarm.Fields.DateTime);
                }
                else
                {
                    DateTime = (DateTime) dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.DateTime]];
                    UnsetNull(ATWebLogger.Core.Alarm.Fields.DateTime);
                }
            }
            else
            {
                _isReadOnly = true;
                SetNull(ATWebLogger.Core.Alarm.Fields.DateTime);
            }

            if (HasField(_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.HighLevel], dr))
            {
                if (dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.HighLevel]] == DBNull.Value)
                {
                    SetNull(ATWebLogger.Core.Alarm.Fields.HighLevel);
                }
                else
                {
                    HighLevel = (double) dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.HighLevel]];
                    UnsetNull(ATWebLogger.Core.Alarm.Fields.HighLevel);
                }
            }
            else
            {
                _isReadOnly = true;
                SetNull(ATWebLogger.Core.Alarm.Fields.HighLevel);
            }

            if (HasField(_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.Id], dr))
            {
                if (dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.Id]] == DBNull.Value)
                {
                    SetNull(ATWebLogger.Core.Alarm.Fields.Id);
                }
                else
                {
                    Id = (int) dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.Id]];
                    UnsetNull(ATWebLogger.Core.Alarm.Fields.Id);
                }
            }
            else
            {
                _isReadOnly = true;
                SetNull(ATWebLogger.Core.Alarm.Fields.Id);
            }

            if (HasField(_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.LocationName], dr))
            {
                if (dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.LocationName]] == DBNull.Value)
                {
                    SetNull(ATWebLogger.Core.Alarm.Fields.LocationName);
                }
                else
                {
                    LocationName = (string) dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.LocationName]];
                    LocationName = LocationName.TrimEnd();
                    UnsetNull(ATWebLogger.Core.Alarm.Fields.LocationName);
                }
            }
            else
            {
                _isReadOnly = true;
                SetNull(ATWebLogger.Core.Alarm.Fields.LocationName);
            }

            if (HasField(_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.LowLevel], dr))
            {
                if (dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.LowLevel]] == DBNull.Value)
                {
                    SetNull(ATWebLogger.Core.Alarm.Fields.LowLevel);
                }
                else
                {
                    LowLevel = (double) dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.LowLevel]];
                    UnsetNull(ATWebLogger.Core.Alarm.Fields.LowLevel);
                }
            }
            else
            {
                _isReadOnly = true;
                SetNull(ATWebLogger.Core.Alarm.Fields.LowLevel);
            }

            if (HasField(_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.Type], dr))
            {
                if (dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.Type]] == DBNull.Value)
                {
                    SetNull(ATWebLogger.Core.Alarm.Fields.Type);
                }
                else
                {
                    Type = (string) dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.Type]];
                    Type = Type.TrimEnd();
                    UnsetNull(ATWebLogger.Core.Alarm.Fields.Type);
                }
            }
            else
            {
                _isReadOnly = true;
                SetNull(ATWebLogger.Core.Alarm.Fields.Type);
            }

            if (HasField(_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.Value], dr))
            {
                if (dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.Value]] == DBNull.Value)
                {
                    SetNull(ATWebLogger.Core.Alarm.Fields.Value);
                }
                else
                {
                    Value = (double) dr[_internalNameDictionary[ATWebLogger.Core.Alarm.Fields.Value]];
                    UnsetNull(ATWebLogger.Core.Alarm.Fields.Value);
                }
            }
            else
            {
                _isReadOnly = true;
                SetNull(ATWebLogger.Core.Alarm.Fields.Value);
            }


            if (_concurrency != ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore)
            {
                _concurrencyArray = GetSerializedObject(this);
            }
        }

        /// <summary>
        /// Determines if the given field exists in the SqlDataReader.
        /// </summary>
        /// <param name="fieldName">The name of the field to search for.</param>
        /// <param name="reader">The SqlDataReader to search in.</param>
        /// <returns>Returns true if the field exists in the SqlDataReader, otherwise, returns false.</returns>
        protected bool HasField(string fieldName, MySqlDataReader reader)
        {
            for (int i = 0; i < reader.FieldCount; i++)
            {
                if (reader.GetName(i) == fieldName)
                    return true;
            }

            return false;
        }

        /// <summary>
        /// Determines if the given field exists in the DataRow.
        /// </summary>
        /// <param name="fieldName">The name of the field to search for.</param>
        /// <param name="row">The DataRow to search in.</param>
        /// <returns>Returns true if the field exists in the DataRow, otherwise, returns false.</returns>
        protected bool HasField(string fieldName, DataRow row)
        {
            return row.Table.Columns.Contains(fieldName);
        }

        /// <summary>
        /// Retrieves the specified fields from the row with the matching
        /// primary key from the database and stores them in the properties.
        /// </summary>
        /// <param name="id">The primary key of the row to pull.</param>
        /// <param name="fields">The fields to pull from the database.</param>
        protected void Get(int id, List<ATWebLogger.Core.Alarm.Fields> fields)
        {
            string strFields = "`" + LayerGenPrimaryKey + "`,";

            // If there are no fields, then pull all fields
            if (fields == null || fields.Count == 0)
            {
                strFields = "*";
            }
            else
            {
                foreach (ATWebLogger.Core.Alarm.Fields field in fields)
                {
                    strFields = strFields + "`" + _internalNameDictionary[field] + "`,";
                }
                strFields = strFields.TrimEnd(',');
            }

            string sql = "SELECT " + strFields + " FROM `" + LayerGenTableName + "` WHERE " + LayerGenPrimaryKey + "=" + id;


            using (MySqlConnection connection = new MySqlConnection(_connectionString))
            {
                using (MySqlCommand command = new MySqlCommand())
                {
                    connection.Open();
                    command.CommandType = _layerGenUseStoredProcedures ? CommandType.StoredProcedure : CommandType.Text;
                    command.CommandText = _layerGenUseStoredProcedures ? ("spAlarm_Select").Replace("@", "") : sql;
                    command.Connection = connection;
                    if (_layerGenUseStoredProcedures)
                    {
                        command.Parameters.AddWithValue("@id", id);
                        command.Parameters.AddWithValue("@fields", strFields);
                    }
                    else
                    {

                    }

                    using (MySqlDataReader reader = command.ExecuteReader())
                    {
                        if (!reader.HasRows)
                            throw new ATWebLogger.Core.RowNotFoundException(LayerGenTableName + ": Could not find row with id of " + id);

                        while (reader.Read())
                        {
                            Id = (int) reader["Id"];
                            UnsetNull(ATWebLogger.Core.Alarm.Fields.Id);
                            if ((!HasField("Ack", reader)) || reader.IsDBNull(reader.GetOrdinal("Ack")))
                            {
                                SetNull(ATWebLogger.Core.Alarm.Fields.Ack);
                            }
                            else
                            {
                                Ack = (string) reader["Ack"];
                    Ack = Ack.TrimEnd();
                                UnsetNull(ATWebLogger.Core.Alarm.Fields.Ack);
                            }
                            if ((!HasField("DateTime", reader)) || reader.IsDBNull(reader.GetOrdinal("DateTime")))
                            {
                                SetNull(ATWebLogger.Core.Alarm.Fields.DateTime);
                            }
                            else
                            {
                                DateTime = (DateTime) reader["DateTime"];
                                UnsetNull(ATWebLogger.Core.Alarm.Fields.DateTime);
                            }
                            if ((!HasField("HighLevel", reader)) || reader.IsDBNull(reader.GetOrdinal("HighLevel")))
                            {
                                SetNull(ATWebLogger.Core.Alarm.Fields.HighLevel);
                            }
                            else
                            {
                                HighLevel = (double) reader["HighLevel"];
                                UnsetNull(ATWebLogger.Core.Alarm.Fields.HighLevel);
                            }
                            if ((!HasField("LocationName", reader)) || reader.IsDBNull(reader.GetOrdinal("LocationName")))
                            {
                                SetNull(ATWebLogger.Core.Alarm.Fields.LocationName);
                            }
                            else
                            {
                                LocationName = (string) reader["LocationName"];
                    LocationName = LocationName.TrimEnd();
                                UnsetNull(ATWebLogger.Core.Alarm.Fields.LocationName);
                            }
                            if ((!HasField("LowLevel", reader)) || reader.IsDBNull(reader.GetOrdinal("LowLevel")))
                            {
                                SetNull(ATWebLogger.Core.Alarm.Fields.LowLevel);
                            }
                            else
                            {
                                LowLevel = (double) reader["LowLevel"];
                                UnsetNull(ATWebLogger.Core.Alarm.Fields.LowLevel);
                            }
                            if ((!HasField("Type", reader)) || reader.IsDBNull(reader.GetOrdinal("Type")))
                            {
                                SetNull(ATWebLogger.Core.Alarm.Fields.Type);
                            }
                            else
                            {
                                Type = (string) reader["Type"];
                    Type = Type.TrimEnd();
                                UnsetNull(ATWebLogger.Core.Alarm.Fields.Type);
                            }
                            if ((!HasField("Value", reader)) || reader.IsDBNull(reader.GetOrdinal("Value")))
                            {
                                SetNull(ATWebLogger.Core.Alarm.Fields.Value);
                            }
                            else
                            {
                                Value = (double) reader["Value"];
                                UnsetNull(ATWebLogger.Core.Alarm.Fields.Value);
                            }

                        }
                        if (_concurrency != ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore)
                        {
                            _concurrencyArray = GetSerializedObject(this);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Retrieves the row with the matching primary key from the
        /// database and stores them in the properties.
        /// </summary>
        /// <param name="id">The primary key of the row to pull.</param>
        private void Get(int id)
        {
            Get(id, null);
        }

        /// <summary>
        /// Unsets the value of the given field to null.
        /// </summary>
        /// <param name="field">The field to unset as null.</param>
        private void UnsetNull(ATWebLogger.Core.Alarm.Fields field)
        {
            _nullDictionary[field] = false;
        }

        /// <summary>
        /// Sets the value of the given field to null.
        /// </summary>
        /// <param name="field">The field to set as null.</param>
        public void SetNull(ATWebLogger.Core.Alarm.Fields field)
        {
            _layerGenIsDirty = true;
            _nullDictionary[field] = true;
        }

        /// <summary>
        /// Determines if the given field is null or if it contains a value.
        /// </summary>
        /// <param name="field">The field to test for a null value.</param>
        /// <returns>True, if the field is null, otherwise, false.</returns>
        public bool IsNull(ATWebLogger.Core.Alarm.Fields field)
        {
            return _nullDictionary[field];
        }

        /// <summary>
        /// Resets all properties to their default (null) value.
        /// </summary>
        private void ResetToDefault()
        {
            _nullDictionary[ATWebLogger.Core.Alarm.Fields.Ack] = true;
            _nullDictionary[ATWebLogger.Core.Alarm.Fields.DateTime] = true;
            _nullDictionary[ATWebLogger.Core.Alarm.Fields.HighLevel] = true;
            _nullDictionary[ATWebLogger.Core.Alarm.Fields.LocationName] = true;
            _nullDictionary[ATWebLogger.Core.Alarm.Fields.LowLevel] = true;
            _nullDictionary[ATWebLogger.Core.Alarm.Fields.Type] = true;
            _nullDictionary[ATWebLogger.Core.Alarm.Fields.Value] = true;

            _oldPrimaryKeyValue = _id;
        }

        /// <summary>
        /// Deletes this row from the database.
        /// </summary>
        public void Delete()
        {
            if (!_layerGenUseStoredProcedures)
            {
                string cmdString = "DELETE FROM `" + LayerGenTableName + "` WHERE `" + LayerGenPrimaryKey + "`=" + _id;

                using (MySqlConnection connection = new MySqlConnection(_connectionString))
                {
                    connection.Open();
                    using (MySqlCommand command = new MySqlCommand())
                    {
                        command.Connection = connection;
                        command.CommandType = CommandType.Text;
                        command.CommandText = cmdString;

                        command.ExecuteNonQuery();
                    }
                }
            }
            else
            {
                using (MySqlConnection connection = new MySqlConnection(_connectionString))
                {
                    connection.Open();
                    using (MySqlCommand command = new MySqlCommand())
                    {
                        command.Connection = connection;
                        command.CommandType = CommandType.StoredProcedure;
                        command.CommandText = ("spAlarm_Delete").Replace("@", "");
                        command.Parameters.AddWithValue("@val1", _id);

                        command.ExecuteNonQuery();
                    }
                }
            }           
            ResetToDefault();
            _layerGenIsDirty = false;
            _layerGenIsUpdate = false;
        }

        /// <summary>
        /// Saves this row to the database. It will either do an INSERT or an UPDATE
        /// depending on whether this is a new row or an existing row.
        /// </summary>
        /// <exception cref="ATWebLogger.Core.ReadOnlyException">Thrown if only partial fields have loaded. If this is a force save, then this exception will not be thrown.</exception>
        /// <exception cref="ATWebLogger.Core.OutOfSyncException">Thrown if concurrency is set to strict and the row being saved is out of sync with the row in the database.</exception>
        public void Save()
        {
            Save(false);
        }

        /// <summary>
        /// Saves this row to the database. It will either do an INSERT or an UPDATE
        /// depending on whether this is a new row or an existing row. You can specify
        /// whether or not to force save this row. If only partial fields have been
        /// loaded, force saving will force the row to save. Keep in mind though that
        /// the fields that are not loaded will be overwritten with a null value.
        /// </summary>
        /// <param name="forceSave">True, if you want to force save the row.</param>
        /// <exception cref="ATWebLogger.Core.ReadOnlyException">Thrown if only partial fields have loaded. If this is a force save, then this exception will not be thrown.</exception>
        /// <exception cref="ATWebLogger.Core.OutOfSyncException">Thrown if concurrency is set to strict and the row being saved is out of sync with the row in the database.</exception>
        public void Save(bool forceSave)
        {
            MySqlParameter parameter;

            if (!_layerGenIsDirty)
            {
                return;
            }

            if (_isReadOnly && forceSave == false)
            {
                throw new ATWebLogger.Core.ReadOnlyException(LayerGenTableName + " is in a read-only state because only partial fields have been loaded!");
            }

            if (!_layerGenIsUpdate)
            {
                if (!_layerGenUseStoredProcedures)
                {
                    string cmdString =
                        "INSERT INTO `" + LayerGenTableName + "` (" + LayerGenFieldNames + ") VALUES (" + LayerGenValueNames +
                        "); SELECT LAST_INSERT_ID();";

                    using (MySqlConnection connection = new MySqlConnection(_connectionString))
                    {
                        using (MySqlCommand command = new MySqlCommand())
                        {
                            command.Connection = connection;
                            command.CommandType = CommandType.Text;
                            command.CommandText = cmdString;
                        parameter = new MySqlParameter("@val1", MySqlDbType.VarChar);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.Ack))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _ack;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val2", MySqlDbType.DateTime);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.DateTime))
                            parameter.Value = DateTime.Now;
                        else
                            parameter.Value = _dateTime;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val3", MySqlDbType.Double);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.HighLevel))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _highLevel;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val4", MySqlDbType.VarChar);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.LocationName))
                            parameter.Value = "";
                        else
                            parameter.Value = _locationName;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val5", MySqlDbType.Double);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.LowLevel))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _lowLevel;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val6", MySqlDbType.VarChar);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.Type))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _type;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val7", MySqlDbType.Double);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.Value))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _value;
                        command.Parameters.Add(parameter);

                            connection.Open();
                            object obj = command.ExecuteScalar();
                            
                            _id = (int) (ulong) obj;

                            _oldPrimaryKeyValue = _id;
                            _layerGenIsUpdate = true;
                            _layerGenIsDirty = false;
							if (_concurrency != ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore)
                            {
                                _concurrencyArray = GetSerializedObject(this);
                            }
                        }
                    }
                }
                else
                {
                    using (MySqlConnection connection = new MySqlConnection(_connectionString))
                    {
                        using (MySqlCommand command = new MySqlCommand())
                        {
                            command.Connection = connection;
                            command.CommandType = CommandType.StoredProcedure;
                            command.CommandText = ("spAlarm_Insert").Replace("@", "");
                        parameter = new MySqlParameter("@val1", MySqlDbType.VarChar);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.Ack))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _ack;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val2", MySqlDbType.DateTime);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.DateTime))
                            parameter.Value = DateTime.Now;
                        else
                            parameter.Value = _dateTime;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val3", MySqlDbType.Double);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.HighLevel))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _highLevel;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val4", MySqlDbType.VarChar);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.LocationName))
                            parameter.Value = "";
                        else
                            parameter.Value = _locationName;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val5", MySqlDbType.Double);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.LowLevel))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _lowLevel;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val6", MySqlDbType.VarChar);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.Type))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _type;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val7", MySqlDbType.Double);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.Value))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _value;
                        command.Parameters.Add(parameter);

                            connection.Open();
                            object obj = command.ExecuteScalar();
                            
                            _id = (int) (ulong) obj;

                            _oldPrimaryKeyValue = _id;
                            _layerGenIsUpdate = true;
                            _layerGenIsDirty = false;
                            if (_concurrency != ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore)
                            {
                                _concurrencyArray = GetSerializedObject(this);
                            }
                        }
                    }
                }
            }
            else
            {
                if (!_layerGenUseStoredProcedures)
                {
                    string cmdString = "UPDATE `" + LayerGenTableName + "` SET `Ack`=@val1,`DateTime`=@val2,`HighLevel`=@val3,`LocationName`=@val4,`LowLevel`=@val5,`Type`=@val6,`Value`=@val7 WHERE " + LayerGenPrimaryKey + "=@val8";

                    using (MySqlConnection connection = new MySqlConnection(_connectionString))
                    {
                        using (MySqlCommand command = new MySqlCommand())
                        {
                            command.Connection = connection;
                            command.CommandType = CommandType.Text;
                            command.CommandText = cmdString;
                        parameter = new MySqlParameter("@val1", MySqlDbType.VarChar);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.Ack))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _ack;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val2", MySqlDbType.DateTime);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.DateTime))
                            parameter.Value = DateTime.Now;
                        else
                            parameter.Value = _dateTime;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val3", MySqlDbType.Double);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.HighLevel))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _highLevel;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val4", MySqlDbType.VarChar);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.LocationName))
                            parameter.Value = "";
                        else
                            parameter.Value = _locationName;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val5", MySqlDbType.Double);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.LowLevel))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _lowLevel;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val6", MySqlDbType.VarChar);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.Type))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _type;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val7", MySqlDbType.Double);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.Value))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _value;
                        command.Parameters.Add(parameter);

                            command.Parameters.AddWithValue("@val8", _oldPrimaryKeyValue);

                            if (_concurrency != ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore)
                            {
                                if (!IsDataEqual())
                                {
                                    throw new ATWebLogger.Core.OutOfSyncException(LayerGenTableName + ": Row is out of sync with database! Changes not written to database!");
                                }
                            }

                            connection.Open();
                            command.ExecuteNonQuery();
                            _oldPrimaryKeyValue = _id;
                            _layerGenIsUpdate = true;
                            _layerGenIsDirty = false;
                            if (_concurrency != ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore)
                            {
                                _concurrencyArray = GetSerializedObject(this);
                            }
                        }
                    }
                }
                else
                {
                    using (MySqlConnection connection = new MySqlConnection(_connectionString))
                    {
                        using (MySqlCommand command = new MySqlCommand())
                        {
                            command.Connection = connection;
                            command.CommandType = CommandType.StoredProcedure;
                            command.CommandText = ("spAlarm_Update").Replace("@", "");
                        parameter = new MySqlParameter("@val1", MySqlDbType.VarChar);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.Ack))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _ack;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val2", MySqlDbType.DateTime);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.DateTime))
                            parameter.Value = DateTime.Now;
                        else
                            parameter.Value = _dateTime;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val3", MySqlDbType.Double);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.HighLevel))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _highLevel;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val4", MySqlDbType.VarChar);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.LocationName))
                            parameter.Value = "";
                        else
                            parameter.Value = _locationName;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val5", MySqlDbType.Double);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.LowLevel))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _lowLevel;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val6", MySqlDbType.VarChar);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.Type))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _type;
                        command.Parameters.Add(parameter);
                        parameter = new MySqlParameter("@val7", MySqlDbType.Double);
                        if (IsNull(ATWebLogger.Core.Alarm.Fields.Value))
                            parameter.Value = DBNull.Value;
                        else
                            parameter.Value = _value;
                        command.Parameters.Add(parameter);

                            command.Parameters.AddWithValue("@val8", _oldPrimaryKeyValue);

                            if (_concurrency != ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore)
                            {
                                if (!IsDataEqual())
                                {
                                    throw new ATWebLogger.Core.OutOfSyncException(LayerGenTableName + ": Row is out of sync with database! Changes not written to database!");
                                }
                            }

                            connection.Open();
                            command.ExecuteNonQuery();
                            _oldPrimaryKeyValue = _id;
                            _layerGenIsUpdate = true;
                            _layerGenIsDirty = false;
                            if (_concurrency != ATWebLogger.Core.Alarm.ConcurrencyOptions.Ignore)
                            {
                                _concurrencyArray = GetSerializedObject(this);
                            }
                        }
                    }
                }
            }
        }



        /// <summary>
        /// Retrieves all rows and all fields from the Alarm table.
        /// </summary>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static DataTable GetAll(bool useStoredProcedures)
        {
            if (!useStoredProcedures)
            {
                return GetBySqlStatement("SELECT * FROM `" + LayerGenTableName + "`");
            }

            using (MySqlConnection connection = new MySqlConnection(Universal.GetConnectionString()))
            {
                using (MySqlCommand command = new MySqlCommand())
                {
                    connection.Open();
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = ("spAlarm_GetAll").Replace("@", "");
                    command.Connection = connection;

                    using (MySqlDataAdapter adapter = new MySqlDataAdapter())
                    {
                        using (DataSet ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            adapter.Fill(ds);

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }
            return null;
        }

        /// <summary>
        /// Retrieves all rows and all fields from the Alarm table.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static DataTable GetAll(ATWebLogger.Core.LayerGenConnectionString connectionString, bool useStoredProcedures)
        {
            if (!useStoredProcedures)
            {
                return GetBySqlStatement(connectionString, "SELECT * FROM `" + LayerGenTableName + "`");
            }

            using (MySqlConnection connection = new MySqlConnection(connectionString.ConnectionString))
            {
                using (MySqlCommand command = new MySqlCommand())
                {
                    connection.Open();
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = ("spAlarm_GetAll").Replace("@", "");
                    command.Connection = connection;

                    using (MySqlDataAdapter adapter = new MySqlDataAdapter())
                    {
                        using (DataSet ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            adapter.Fill(ds);

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }
            return null;
        }

        /// <summary>
        /// Retrieves rows from the Alarm table by executing the given stored procedure.
        /// </summary>
        /// <param name="procedureName">The name of the stored procedure to execute.</param>
        /// <param name="procedureParams">A dictionary of parameter/value pairs. This can be null if there are no parameters.</param>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static DataTable GetByStoredProcedure(string procedureName, Dictionary<string, object> procedureParams)
        {
            using (MySqlConnection connection = new MySqlConnection(Universal.GetConnectionString()))
            {
                using (MySqlCommand command = new MySqlCommand())
                {
                    command.Connection = connection;
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = procedureName;
                    if (procedureParams != null && procedureParams.Count > 0)
                    {
                        foreach (KeyValuePair<string, object> kvp in procedureParams)
                        {
                            command.Parameters.AddWithValue(kvp.Key, kvp.Value);
                        }
                    }

                    connection.Open();
                    using (MySqlDataAdapter adapter = new MySqlDataAdapter())
                    {
                        using (DataSet ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            adapter.Fill(ds);

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// Retrieves rows from the Alarm table by executing the given stored procedure.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="procedureName">The name of the stored procedure to execute.</param>
        /// <param name="procedureParams">A dictionary of parameter/value pairs. This can be null if there are no parameters.</param>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static DataTable GetByStoredProcedure(ATWebLogger.Core.LayerGenConnectionString connectionString, string procedureName, Dictionary<string, object> procedureParams)
        {
            using (MySqlConnection connection = new MySqlConnection(connectionString.ConnectionString))
            {
                using (MySqlCommand command = new MySqlCommand())
                {
                    command.Connection = connection;
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandText = procedureName;
                    if (procedureParams != null && procedureParams.Count > 0)
                    {
                        foreach (KeyValuePair<string, object> kvp in procedureParams)
                        {
                            command.Parameters.AddWithValue(kvp.Key, kvp.Value);
                        }
                    }

                    connection.Open();
                    using (MySqlDataAdapter adapter = new MySqlDataAdapter())
                    {
                        using (DataSet ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            adapter.Fill(ds);

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// Retrieves rows from the Alarm table, based on the given SQL statement.
        /// </summary>
        /// <param name="sql">The SQL statement to execute.</param>
        /// <param name="sqlParams">Optional <see cref="System.String.Format"/> like parameters</param>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static DataTable GetBySqlStatement(string sql, params object[] sqlParams)
        {
            int paramNdx = 0;
            int valNdx = 1;
            Dictionary<string, string> paramValDictionary = new Dictionary<string, string>();

            foreach (object param in sqlParams)
            {
                if (param is string)
                {
                    sql = sql.Replace("'{" + paramNdx + "}'", "@val" + valNdx);
                    sql = sql.Replace("{" + paramNdx + "}", "@val" + valNdx);
                    paramValDictionary.Add("@val" + valNdx, (string)param);
                    valNdx++;
                }
                else
                {
                    sql = sql.Replace("{" + paramNdx + "}", param.ToString());
                }
                paramNdx++;
            }

            using (MySqlConnection connection = new MySqlConnection(Universal.GetConnectionString()))
            {
                using (MySqlCommand command = new MySqlCommand())
                {
                    command.Connection = connection;
                    command.CommandType = CommandType.Text;
                    command.CommandText = sql;

                    foreach (KeyValuePair<string, string> kvp in paramValDictionary)
                    {
                        command.Parameters.AddWithValue(kvp.Key, kvp.Value);
                    }

                    connection.Open();
                    using (MySqlDataAdapter adapter = new MySqlDataAdapter())
                    {
                        using (DataSet ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            adapter.Fill(ds);

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// Retrieves rows from the Alarm table, based on the given SQL statement.
        /// </summary>
        /// <param name="connectionString">Sets the connection string to use to connect to the database</param>
        /// <param name="sql">The SQL statement to execute.</param>
        /// <param name="sqlParams">Optional <see cref="System.String.Format"/> like parameters</param>
        /// <returns>A <see cref="System.Data.DataTable" /> with all the data.</returns>
        internal static DataTable GetBySqlStatement(ATWebLogger.Core.LayerGenConnectionString connectionString, string sql, params object[] sqlParams)
        {
            int paramNdx = 0;
            int valNdx = 1;
            Dictionary<string, string> paramValDictionary = new Dictionary<string, string>();

            foreach (object param in sqlParams)
            {
                if (param is string)
                {
                    sql = sql.Replace("'{" + paramNdx + "}'", "@val" + valNdx);
                    sql = sql.Replace("{" + paramNdx + "}", "@val" + valNdx);
                    paramValDictionary.Add("@val" + valNdx, (string)param);
                    valNdx++;
                }
                else
                {
                    sql = sql.Replace("{" + paramNdx + "}", param.ToString());
                }
                paramNdx++;
            }

            using (MySqlConnection connection = new MySqlConnection(connectionString.ConnectionString))
            {
                using (MySqlCommand command = new MySqlCommand())
                {
                    command.Connection = connection;
                    command.CommandType = CommandType.Text;
                    command.CommandText = sql;

                    foreach (KeyValuePair<string, string> kvp in paramValDictionary)
                    {
                        command.Parameters.AddWithValue(kvp.Key, kvp.Value);
                    }

                    connection.Open();
                    using (MySqlDataAdapter adapter = new MySqlDataAdapter())
                    {
                        using (DataSet ds = new DataSet())
                        {
                            adapter.SelectCommand = command;
                            adapter.Fill(ds);

                            if (ds.Tables.Count > 0)
                            {
                                return ds.Tables[0];
                            }
                        }
                    }
                }
            }

            return null;
        }

        private byte[] GetSerializedObject(AlarmBase cls)
        {
            byte[] clsid = ObjectToByteArray(cls.Id);
            byte[] clsack = ObjectToByteArray(cls.Ack);
            byte[] clsdateTime = ObjectToByteArray(cls.DateTime);
            byte[] clshighLevel = ObjectToByteArray(cls.HighLevel);
            byte[] clslocationName = ObjectToByteArray(cls.LocationName);
            byte[] clslowLevel = ObjectToByteArray(cls.LowLevel);
            byte[] clstype = ObjectToByteArray(cls.Type);
            byte[] clsvalue = ObjectToByteArray(cls.Value);

            byte[] clsArray = new byte[clsid.Length + clsack.Length + clsdateTime.Length + clshighLevel.Length + clslocationName.Length + clslowLevel.Length + 
                       clstype.Length + clsvalue.Length];
            Array.Copy(clsid, 0, clsArray, 0, clsid.Length);
            Array.Copy(clsack, 0, clsArray, 0 + clsid.Length, clsack.Length);
            Array.Copy(clsdateTime, 0, clsArray, 0 + clsid.Length + clsack.Length, clsdateTime.Length);
            Array.Copy(clshighLevel, 0, clsArray, 0 + clsid.Length + clsack.Length + clsdateTime.Length, clshighLevel.Length);
            Array.Copy(clslocationName, 0, clsArray, 0 + clsid.Length + clsack.Length + clsdateTime.Length + clshighLevel.Length, clslocationName.Length);
            Array.Copy(clslowLevel, 0, clsArray, 0 + clsid.Length + clsack.Length + clsdateTime.Length + clshighLevel.Length + clslocationName.Length
                        , clslowLevel.Length);
            Array.Copy(clstype, 0, clsArray, 0 + clsid.Length + clsack.Length + clsdateTime.Length + clshighLevel.Length + clslocationName.Length
                         + clslowLevel.Length, clstype.Length);
            Array.Copy(clsvalue, 0, clsArray, 0 + clsid.Length + clsack.Length + clsdateTime.Length + clshighLevel.Length + clslocationName.Length
                         + clslowLevel.Length + clstype.Length, clsvalue.Length);

            return clsArray;

        }

        /// <summary>
        /// Determines of the current concurrency array is equal to what's in the database.
        /// </summary>
        /// <returns>True, if the data in memory is equal to whats in the database, otherwise false.</returns>
        protected bool IsDataEqual()
        {
            ATWebLogger.Core.Alarm obj = new ATWebLogger.Core.Alarm(Id);
            byte[] myArray = _concurrencyArray;
            byte[] clsArray = GetSerializedObject(obj);

            if (myArray.Length != clsArray.Length)
            {
                return false;
            }

            for (int i = 0; i < myArray.Length; i++)
            {
                if (myArray[i] != clsArray[i])
                {
                    return false;
                }
            }
            return true;
        }

        private byte[] ObjectToByteArray(object obj)
        {
            if (obj == null)
                return new byte[] {};

            if (obj is MySqlGeometry)
            {
                MySqlGeometry obj2 = (MySqlGeometry) obj;
                SimpleGeometry sg = new SimpleGeometry();
                sg.X = obj2.XCoordinate;
                sg.Y = obj2.YCoordinate;
                sg.Srid = obj2.SRID;
                sg.Value = obj2.Value;
                obj = sg;
            }

            BinaryFormatter bf = new BinaryFormatter();
            using (MemoryStream ms = new MemoryStream())
            {
                bf.Serialize(ms, obj);
                return ms.ToArray();
            }
        }

        [Serializable]
        private class SimpleGeometry
        {
            private double? _x;
            private double? _y;
            private byte[] _value;
            private int? _srid;

            public double? X {
                get { return _x; }
                set { _x = value; }
            }
            public double? Y {
                get { return _y; }
                set { _y = value; }
            }
            public byte[] Value {
                get { return _value; }
                set { _value = value; }
            }
            public int? Srid {
                get { return _srid; }
                set { _srid = value; }
            }
        }

        /// <summary>
        /// Converts an instance of an object to a string format
        /// </summary>
        /// <param name="format">Specifies if it should convert to XML, BSON or JSON</param>
        /// <returns>The object, converted to a string representation</returns>
        public string ToString(ATWebLogger.Core.SerializationFormats format)
        {
            SerializableAlarm serializableAlarm = new SerializableAlarm();
            serializableAlarm.Id = IsNull(ATWebLogger.Core.Alarm.Fields.Id)
                ? (int?) null : _id;
            serializableAlarm.Ack = IsNull(ATWebLogger.Core.Alarm.Fields.Ack)
                ? null : _ack;
            serializableAlarm.DateTime = IsNull(ATWebLogger.Core.Alarm.Fields.DateTime)
                ? (DateTime?) null : _dateTime;
            serializableAlarm.HighLevel = IsNull(ATWebLogger.Core.Alarm.Fields.HighLevel)
                ? (double?) null : _highLevel;
            serializableAlarm.LocationName = IsNull(ATWebLogger.Core.Alarm.Fields.LocationName)
                ? null : _locationName;
            serializableAlarm.LowLevel = IsNull(ATWebLogger.Core.Alarm.Fields.LowLevel)
                ? (double?) null : _lowLevel;
            serializableAlarm.Type = IsNull(ATWebLogger.Core.Alarm.Fields.Type)
                ? null : _type;
            serializableAlarm.Value = IsNull(ATWebLogger.Core.Alarm.Fields.Value)
                ? (double?) null : _value;
            serializableAlarm.SerializationIsUpdate = _layerGenIsUpdate;

            if (format == ATWebLogger.Core.SerializationFormats.Json)
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(serializableAlarm);
            }

            if (format == ATWebLogger.Core.SerializationFormats.Xml)
            {
                System.Xml.Serialization.XmlSerializer xType = new System.Xml.Serialization.XmlSerializer(serializableAlarm.GetType());

                using (StringWriter sw = new StringWriter())
                {
                    xType.Serialize(sw, serializableAlarm);

                    return sw.ToString();
                }
            }

            if (format == ATWebLogger.Core.SerializationFormats.BsonBase64)
            {
                using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
                {
                    using (Newtonsoft.Json.Bson.BsonWriter writer = new Newtonsoft.Json.Bson.BsonWriter(ms))
                    {
                        Newtonsoft.Json.JsonSerializer serializer = new Newtonsoft.Json.JsonSerializer();
                        serializer.Serialize(writer, serializableAlarm);
                    }
                    return Convert.ToBase64String(ms.ToArray());
                }
            }

            return "";
        }


        protected static ATWebLogger.Core.Alarm BsonToAlarm(string bson)
        {
            SerializableAlarm z;
            byte[] data = Convert.FromBase64String(bson);
            using (System.IO.MemoryStream ms = new System.IO.MemoryStream(data))
            {
                using (Newtonsoft.Json.Bson.BsonReader reader = new Newtonsoft.Json.Bson.BsonReader(ms))
                {
                    Newtonsoft.Json.JsonSerializer serializer = new Newtonsoft.Json.JsonSerializer();
                    z = serializer.Deserialize<SerializableAlarm>(reader);
                }
            }

            ATWebLogger.Core.Alarm tmp = new ATWebLogger.Core.Alarm();

            if (z.Ack == null)
            {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.Ack);
            } else {
                tmp._ack = z.Ack;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.Ack);
            }
            if (z.DateTime.HasValue)
            {
                tmp._dateTime = z.DateTime.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.DateTime);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.DateTime);
            }
            if (z.HighLevel.HasValue)
            {
                tmp._highLevel = z.HighLevel.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.HighLevel);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.HighLevel);
            }
            if (z.Id.HasValue)
            {
                tmp._id = z.Id.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.Id);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.Id);
            }
            if (z.LocationName == null)
            {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.LocationName);
            } else {
                tmp._locationName = z.LocationName;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.LocationName);
            }
            if (z.LowLevel.HasValue)
            {
                tmp._lowLevel = z.LowLevel.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.LowLevel);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.LowLevel);
            }
            if (z.Type == null)
            {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.Type);
            } else {
                tmp._type = z.Type;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.Type);
            }
            if (z.Value.HasValue)
            {
                tmp._value = z.Value.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.Value);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.Value);
            }

            ATWebLogger.Core.Encryption64 decryptor = new ATWebLogger.Core.Encryption64();
            tmp._connectionString = decryptor.Decrypt(z.SerializationConnectionString, Universal.LayerGenEncryptionKey);
            tmp._layerGenIsUpdate = z.SerializationIsUpdate;
            tmp._layerGenIsDirty = true;
            return tmp;
        }

        protected static ATWebLogger.Core.Alarm XmlToAlarm(string xml)
        {
            System.Xml.Serialization.XmlSerializer xType = new System.Xml.Serialization.XmlSerializer(typeof(SerializableAlarm));
            SerializableAlarm z;

            using (StringReader sr = new StringReader(xml))
            {
                z = (SerializableAlarm) xType.Deserialize(sr);
            }

            ATWebLogger.Core.Alarm tmp = new ATWebLogger.Core.Alarm();

            if (z.Ack == null)
            {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.Ack);
            } else {
                tmp._ack = z.Ack;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.Ack);
            }
            if (z.DateTime.HasValue)
            {
                tmp._dateTime = z.DateTime.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.DateTime);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.DateTime);
            }
            if (z.HighLevel.HasValue)
            {
                tmp._highLevel = z.HighLevel.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.HighLevel);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.HighLevel);
            }
            if (z.Id.HasValue)
            {
                tmp._id = z.Id.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.Id);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.Id);
            }
            if (z.LocationName == null)
            {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.LocationName);
            } else {
                tmp._locationName = z.LocationName;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.LocationName);
            }
            if (z.LowLevel.HasValue)
            {
                tmp._lowLevel = z.LowLevel.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.LowLevel);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.LowLevel);
            }
            if (z.Type == null)
            {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.Type);
            } else {
                tmp._type = z.Type;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.Type);
            }
            if (z.Value.HasValue)
            {
                tmp._value = z.Value.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.Value);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.Value);
            }

            ATWebLogger.Core.Encryption64 decryptor = new ATWebLogger.Core.Encryption64();
            tmp._connectionString = decryptor.Decrypt(z.SerializationConnectionString, Universal.LayerGenEncryptionKey);
            tmp._layerGenIsUpdate = z.SerializationIsUpdate;
            tmp._layerGenIsDirty = true;
            return tmp;
        }

        protected static ATWebLogger.Core.Alarm JsonToAlarm(string json)
        {
            SerializableAlarm z = Newtonsoft.Json.JsonConvert.DeserializeObject<SerializableAlarm>(json);

            ATWebLogger.Core.Alarm tmp = new ATWebLogger.Core.Alarm();

            if (z.Ack == null)
            {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.Ack);
            } else {
                tmp._ack = z.Ack;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.Ack);
            }
            if (z.DateTime.HasValue)
            {
                tmp._dateTime = z.DateTime.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.DateTime);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.DateTime);
            }
            if (z.HighLevel.HasValue)
            {
                tmp._highLevel = z.HighLevel.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.HighLevel);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.HighLevel);
            }
            if (z.Id.HasValue)
            {
                tmp._id = z.Id.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.Id);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.Id);
            }
            if (z.LocationName == null)
            {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.LocationName);
            } else {
                tmp._locationName = z.LocationName;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.LocationName);
            }
            if (z.LowLevel.HasValue)
            {
                tmp._lowLevel = z.LowLevel.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.LowLevel);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.LowLevel);
            }
            if (z.Type == null)
            {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.Type);
            } else {
                tmp._type = z.Type;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.Type);
            }
            if (z.Value.HasValue)
            {
                tmp._value = z.Value.Value;
                tmp.UnsetNull(ATWebLogger.Core.Alarm.Fields.Value);
            } else {
                tmp.SetNull(ATWebLogger.Core.Alarm.Fields.Value);
            }

            ATWebLogger.Core.Encryption64 decryptor = new ATWebLogger.Core.Encryption64();
            tmp._connectionString = decryptor.Decrypt(z.SerializationConnectionString, Universal.LayerGenEncryptionKey);
            tmp._layerGenIsUpdate = z.SerializationIsUpdate;
            tmp._layerGenIsDirty = true;
            return tmp;
        }

        [Serializable]
        public class SerializableAlarm
        {
            private string _ack;
            private DateTime? _dateTime;
            private double? _highLevel;
            private int? _id;
            private string _locationName;
            private double? _lowLevel;
            private string _type;
            private double? _value;
            private bool _serializationIsUpdate;
            private string _serializationConnectionString;

            public int? Id
            {
                get { return _id; }
                set { _id = value; }
            }
            public string Ack
            {
                get { return _ack; }
                set { _ack = value; }
            }
            public DateTime? DateTime
            {
                get { return _dateTime; }
                set { _dateTime = value; }
            }
            public double? HighLevel
            {
                get { return _highLevel; }
                set { _highLevel = value; }
            }
            public string LocationName
            {
                get { return _locationName; }
                set { _locationName = value; }
            }
            public double? LowLevel
            {
                get { return _lowLevel; }
                set { _lowLevel = value; }
            }
            public string Type
            {
                get { return _type; }
                set { _type = value; }
            }
            public double? Value
            {
                get { return _value; }
                set { _value = value; }
            }
            /// <summary>
            /// Set this to true if <see cref="Save()"></see> should do an update.
            /// Otherwise, set to false to force <see cref="Save()"></see> to do an insert.
            /// </summary>
            public bool SerializationIsUpdate
            {
                get { return _serializationIsUpdate; }
                set { _serializationIsUpdate = value; }
            }

            /// <summary>
            /// The connection string used to connect to the database.
            /// </summary>
            public string SerializationConnectionString
            {
                get { return _serializationConnectionString; }
                set { _serializationConnectionString = value; }
            }
        }

    }
}



